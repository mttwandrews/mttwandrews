def password_checker(password):
 
 #Defined my Alphanumeric characters as Special_K and Spaces
    
    Special_K = {"#","$","%","&","*","+","-",".","/",":",";","<","=",">","?","@","^","!","|","+"}
    Spaces = (" ")
    if len(password) < 14:
        return False 

#Used "if any" in this string to only return False if the iterable is completely false
# so AAA234bbblkss will be returned as false for a lack of alphnumeric characters
    if not any(char.isupper() for char in password):
        return False
    if not any(char.islower() for char in password):
        return False
    if not any(char.isdigit() for char in password):
        return False 
    if not any(char in Special_K for char in password):
        return False
    if any(char in Spaces for char in password):
        return False
 #turn password into type strings than reject strings with over 3 consective repetition 
 #so AAAAbbbb1234!@#$ becomes 0000111122223333 and is therefore rejected
   
    types = ""
    for char in password:
        if char.isupper():
            types += "0"
        if char.islower():
            types += "1"
        if char.isdigit():
            types += "2"
        if char in Special_K:
            types += "3"
       
    
    if "0000" in types or "1111" in types or "2222" in types or "3333" in types:
            return False 
   
    return True 


print(password_checker(""))
